#!/usr/bin/env python

# SPDX-FileCopyrightText: 2021-2023 Leroy Hopson <gdtemu@leroy.geek.nz>
# SPDX-License-Identifier: MIT

import os
import sys

env = SConscript("./thirdparty/godot-cpp/SConstruct")
env['ENV'] = os.environ

# TODO: Use this option to enable slirp.
opts = Variables([], ARGUMENTS)
opts.Add(BoolVariable(
    'with_slirp',
    'Compiles with support for SLiRP',
    False
))

opts.Update(env)
Help(opts.GenerateHelpText(env))

if env['platform'] == 'windows' and env['use_mingw']:
    # This allows MinGW's time.h to expose localtime_r() which is used by TinyEMU's machine.c.
    env.Append(CPPDEFINES=['_POSIX_THREAD_SAFE_FUNCTIONS'])
    # Ditto but for clock_gettime() used by TinyEMU's riscv_machine.c.
    env.Append(CPPDEFINES=['_POSIX_C_SOURCE=200809L', '__EXTENSIONS__'])

env.Append(CPPPATH=[
    'thirdparty/TinyEMU/',
    'thirdparty/TinyEMU/slirp/',
])

env.Append(CPPDEFINES=[
    'CONFIG_RISCV_MAX_XLEN=64'
] + ([
    'CONFIG_X86EMU=y'
] if env['platform'] == 'linux' else []))

env32 = env.Clone()
env32.Append(CPPDEFINES=['MAX_XLEN=32'])
Default(env32.SharedObject(
    target='thirdparty/TinyEMU/riscv_cpu32.so',
    source='thirdparty/TinyEMU/riscv_cpu.c',
))

env64 = env.Clone()
env64.Append(CPPDEFINES=['MAX_XLEN=64'])
Default(env64.SharedObject(
    target='thirdparty/TinyEMU/riscv_cpu64.so',
    source='thirdparty/TinyEMU/riscv_cpu.c',
))

sources = []
sources.append(['thirdparty/TinyEMU/' + f for f in [
    'virtio.c', 'pci.c', 'fs.c', 'cutils.c', 'iomem.c', 'simplefb.c', 'json.c', 'machine.c', 'elf.c',
]])

if env['platform'] != 'windows' and env['platform'] != 'javascript':
    env.Append(CPPDEFINES=['CONFIG_SLIRP=y'])
    sources.append(['thirdparty/TinyEMU/slirp/' + f for f in [
        'bootp.c', 'ip_icmp.c', 'mbuf.c', 'slirp.c', 'tcp_output.c', 'cksum.c', 'ip_input.c', 'misc.c',
        'socket.c', 'tcp_subr.c', 'udp.c', 'if.c', 'ip_output.c', 'sbuf.c', 'tcp_input.c', 'tcp_timer.c',
    ]])
    sources.append(['thirdparty/TinyEMU/fs_disk.c'])

sources.append(['thirdparty/TinyEMU/' + f for f in [
    'riscv_machine.c', 'softfp.c',
    'riscv_cpu32.so',
    'riscv_cpu64.so',
    'x86_cpu.c', 'x86_machine.c', 'ide.c', 'ps2.c', 'vmmouse.c', 'pckbd.c', 'vga.c',
]])

sources.append('src/temu.c')
sources.append('src/vm.cpp')
sources.append("src/frame_buffer.cpp")
sources.append('src/register_types.cpp')

env.Append(LIBS=[
    '-lpthread',
] + [
    '-lwsock32',
] if env['platform'] == 'windows' else [])

env.Append(LINKFLAGS=['-static-libstdc++'])

library = env.SharedLibrary(
    target='bin/libgdtemu{}{}'.format(
        env['suffix'],
        env['SHLIBSUFFIX'],
    ), source=sources
)

Default(library)
