#!/usr/bin/env python
# SPDX-FileCopyrightText: 2017-2020 GodotNativeTools
# SPDX-FileCopyrightText: 2021-2022 Leroy Hopson <copyright@leroy.geek.nz>
# SPDX-License-Identifier: MIT
import os
import sys
import subprocess

# Try to detect the host platform automatically. 
# This is used if no `platform` argument is passed.
if sys.platform.startswith('linux'):
    host_platform = 'linux'
elif sys.platform == 'darwin':
    host_platform = 'osx'
elif sys.platform == 'win32' or sys.platform == 'msys':
    host_platform = 'windows'
else:
    raise ValueError(
        'Could not detect platform automatically, please specify with '
        'platform=<platform>'
    )

env = Environment(ENV = os.environ)

is64 = sys.maxsize > 2**32
if (
    env['TARGET_ARCH'] == 'amd64' or
    env['TARGET_ARCH'] == 'emt64' or
    env['TARGET_ARCH'] == 'x86_64' or
    env['TARGET_ARCH'] == 'arm64-v8a'
):
    is64 = True

opts = Variables([], ARGUMENTS)

opts.Add(EnumVariable(
    'platform',
    'Target platform',
    host_platform,
    allowed_values=('linux', 'javascript', 'osx', 'windows'),
    ignorecase=2
))
opts.Add(EnumVariable(
    'bits',
    'Target platform bits',
    '64' if is64 else '32',
    ('32', '64')
))
opts.Add(EnumVariable(
    'target',
    'Compilation target',
    'debug',
    allowed_values=('debug', 'release'),
    ignorecase=2
))
opts.Add(BoolVariable(
    'disable_pty',
    'Disables the PTY and its dependencies (LibuvUtils and Pipe). Has no effect on platforms where PTY is not supported',
    False
))

opts.Update(env)
Help(opts.GenerateHelpText(env))

# Allows 32bit builds on windows 64bit. 
if env['platform'] == 'windows':
    if env['bits'] == '64':
        env = Environment(TARGET_ARCH='amd64')
    elif env['bits'] == '32':
        env = Environment(TARGET_ARCH='x86')
    opts.Update(env)

# Add PATH to environment so scons can find commands such as g++, etc.
env.AppendENVPath('PATH', os.getenv('PATH'))


# Compile for Linux.
if env['platform'] == 'linux':
    env.Append(CPPDEFINES=['__linux__'])

    env['CC'] = 'gcc'
    env['CXX'] = 'g++'
    env['LIBSUFFIX'] = '.a'

    env.Append(CCFLAGS=['-fPIC', '-Wwrite-strings'])
    env.Append(LINKFLAGS=["-Wl,-R'$$ORIGIN'"])

    if env['target'] == 'debug':
        env.Append(CCFLAGS=['-Og', '-g'])
    elif env['target'] == 'release':
        env.Append(CCFLAGS=['-O3'])

    if env['bits'] == '64':
        env.Append(CCFLAGS=['-m64'])
        env.Append(LINKFLAGS=['-m64'])
    elif env['bits'] == '32':
        env.Append(CCFLAGS=['-m32'])
        env.Append(LINKFLAGS=['-m32'])

# Compile for HTML5.
elif env['platform'] == 'javascript':
    env.Append(CPPDEFINES=['__EMSCRIPTEN__'])

    env['bits'] = '32'
    env['CC'] = 'emcc'
    env['CXX'] = 'em++'
    env['AR'] = 'emar'
    env['RANLIB'] = 'emranlib'
    env.Append(CPPFLAGS=['-s', 'SIDE_MODULE=1', '-s', 'ASSERTIONS=1'])
    env.Append(LINKFLAGS=['-s', 'SIDE_MODULE=1', '-s', 'ASSERTIONS=1'])
    env['SHOBJSUFFIX'] = '.bc'
    env['SHLIBSUFFIX'] = '.wasm'
    env['OBJPREFIX'] = ''
    env['OBJSUFFIX'] = '.bc'
    env['PROGPREFIX'] = ''
    env['PROGSUFFIX'] = ''
    env['LIBSUFFIX'] = '.a'
    env['LIBPREFIXES'] = ['$LIBPREFIX']
    env['LIBSUFFIXES'] = ['$LIBSUFFIX']
    env.Replace(SHLINKFLAGS='$LINKFLAGS')
    env.Replace(SHLINKFLAGS='$LINKFLAGS')

# Compile for OSX.
elif env['platform'] == 'osx':
    env.Append(CPPDEFINES=['__APPLE__'])

    env['CC'] = 'clang'
    env['CXX'] = 'clang++'
    env['LIBSUFFIX'] = '.a'

    if env['bits'] == '32':
        raise ValueError(
            'Only 64-bit builds are supported for the macOS target.'
        )

    env.Append(CCFLAGS=['-arch', 'x86_64'])
    env.Append(LINKFLAGS=[
        '-arch',
        'x86_64',
        '-Wl,-undefined,dynamic_lookup',
    ])

    if env['target'] == 'debug':
        env.Append(CCFLAGS=['-Og', '-g'])
    elif env['target'] == 'release':
        env.Append(CCFLAGS=['-O3'])


# Compile for Windows.
elif env['platform'] == 'windows':
    env.Append(CPPDEFINES=['__WIN32'])
    env['LIBSUFFIX'] = '.lib'

    # On Windows using MSVC.
    if host_platform == 'windows':
        if env['target'] == 'debug':
            env.Append(CCFLAGS=['/Z7', '/Od', '/EHsc', '/D_DEBUG', '/MDd'])
        elif env['target'] == 'release':
            env.Append(CCFLAGS=['/O2', '/EHsc', '/DNDEBUG', '/MD'])

    # On Windows, Linux, or MacOS using MinGW.
    elif host_platform == 'linux' or host_platform == 'osx':
        env.Append(CCFLAGS=['-std=c++14', '-Wwrite-strings'])
        env.Append(LINKFLAGS=[
            '--static',
            '-Wl,--no-undefined',
            '-static-libgcc',
            '-static-libstdc++',
        ])

        if env['target'] == 'debug':
            env.Append(CCFLAGS=['-Og', '-g'])
        elif env['target'] == 'release':
            env.Append(CCFLAGS=['-O3'])

        if env['bits'] == '64':
            env['CC'] = 'x86_64-w64-mingw32-gcc'
            env['CXX'] = 'x86_64-w64-mingw32-g++'
            env['AR'] = "x86_64-w64-mingw32-ar"
            env['RANLIB'] = "x86_64-w64-mingw32-ranlib"
            env['LINK'] = "x86_64-w64-mingw32-g++"
        elif env['bits'] == '32':
            env['CC'] = 'i686-w64-mingw32-gcc'
            env['CXX'] = 'i686-w64-mingw32-g++'
            env['AR'] = "i686-w64-mingw32-ar"
            env['RANLIB'] = "i686-w64-mingw32-ranlib"
            env['LINK'] = "i686-w64-mingw32-g++"


# Build TinyEMU as a static library.
env.Append(CPPDEFINES=['-DCONFIG_VERSION=\\"2019-02-10\\"'])
env.Append(CPPDEFINES=['-DCONFIG_RISCV_MAX_XLEN=64'])
env.Append(CPPDEFINES=['-DCONFIG_SLIRP=y'])

if env['platform'] == 'linux':
    env.Append(CPPDEFINES=['-DCONFIG_X86EMU=y'])

env32 = env.Clone() 
env32.Append(CPPDEFINES=['-DMAX_XLEN=32'])
Default(env32.StaticObject(
    target = 'thirdparty/TinyEMU/riscv_cpu32.o',
    source = 'thirdparty/TinyEMU/riscv_cpu.c',
))

env64 = env.Clone()
env64.Append(CPPDEFINES=['-DMAX_XLEN=64'])
Default(env64.StaticObject(
    target = 'thirdparty/TinyEMU/riscv_cpu64.o',
    source = 'thirdparty/TinyEMU/riscv_cpu.c',
))

env.Append(CPPPATH=[
    'thirdparty/TinyEMU/',
    'thirdparty/TinyEMU/slirp/',
])

sources = []
sources.append(['thirdparty/TinyEMU/' + f for f in [
    'virtio.c', 'pci.c', 'fs.c', 'cutils.c', 'iomem.c', 'simplefb.c', 'json.c', 'machine.c', 'elf.c',
]])
sources.append(['thirdparty/TinyEMU/slirp/' + f for f in [
    'bootp.c', 'ip_icmp.c', 'mbuf.c', 'slirp.c', 'tcp_output.c', 'cksum.c', 'ip_input.c', 'misc.c',
    'socket.c', 'tcp_subr.c', 'udp.c', 'if.c', 'ip_output.c', 'sbuf.c', 'tcp_input.c', 'tcp_timer.c',
]])
sources.append(['thirdparty/TinyEMU/' + f for f in [
    'fs_disk.c', 'riscv_machine.c', 'softfp.c',
    'riscv_cpu32.o',
    'riscv_cpu64.o',
    'x86_cpu.c', 'x86_machine.c', 'ide.c', 'ps2.c', 'vmmouse.c', 'pckbd.c', 'vga.c',
    'temu.c',
]])

libtemu = env.StaticLibrary(
    target='thirdparty/TinyEMU/libtemu.a',
    source=sources
)
Default(libtemu)


# Build libgdtemu.
if env['platform'] != 'windows':
    env.Append(CXXFLAGS=['-std=c++14'])

env.Append(CPPPATH=[
    'thirdparty/TinyEMU/',
    'thirdparty/TinyEMU/slirp/',
    'thirdparty/godot-cpp/include/',
    'thirdparty/godot-cpp/include/core/',
    'thirdparty/godot-cpp/include/gen/',
    'thirdparty/godot-cpp/godot-headers/',
    'src/'
])
env.Append(LIBPATH=[
    'thirdparty/godot-cpp/bin/',
    'thirdparty/TinyEMU/',
])

env.Append(LIBS=[
    env.File('thirdparty/godot-cpp/bin/libgodot-cpp.{}.{}.{}{}'.format(
        env['platform'],
        env['target'],
        'wasm' if env['platform'] == 'javascript' else env['bits'],
        env['LIBSUFFIX'],
    )),
    env.File('thirdparty/TinyEMU/libtemu.a'), # FIXME: Add platform, bits, etc.
])

sources = []

sources.append('src/vm.cpp')
sources.append('src/libgdtemu.cpp')

# Compressed initramfs support.
env.Append(CPPDEFINES=['CONFIG_INITRAMFS=y'])
env.Append(LINKFLAGS=['-lz'])

env.Append(LINKFLAGS=['-lpthread'])

if env['platform'] == 'linux':
    libsuffix = "a"
    suffix = "so"
elif env['platform'] == 'javascript':
    libsuffix = "a"
    suffix = "wasm"
elif env['platform'] == 'windows':
    libsuffix = "lib"
    suffix = "dll"
elif env['platform'] == 'osx':
    libsuffix = "a"
    suffix = "dylib"

library = env.SharedLibrary(
    target='bin/libgdtemu.{}.{}.{}'.format(
        env['platform'],
        env['bits'],
        suffix,
    ), source=sources
)
Default(library)
