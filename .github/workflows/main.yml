name: 'Build and Test'

on:
  push:
  schedule: # Keep the cache alive!
    - cron: 7 1 * * fri

jobs:
  reuse-compliance-check:
    name: 'Check REUSE Compliance'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: REUSE Compliance Check
      uses: fsfe/reuse-action@v1.1.1
      with:
        args: --root ./addons/gdtemu lint

  gdformat-check:
    name: 'Check GDScript Format'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: 3.x
        cache: pip
    - name: GDFormat Check
      run: |
        python -m pip install -r requirements.txt
        # Ignore test files for now as they have not been ported to Godot 4.
        # TODO: Port test files to Godot 4.
        gdformat -c ./**/*[^test].gd

  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        platform: [ linux, macos, windows ]
        target: [ release, debug ]
        arch: [ 64-bit, 32-bit ]
        exclude:
          - platform: javascript
            arch: 64-bit
          - platform: macos
            arch: 32-bit
    runs-on: ${{ matrix.platform == 'macos' && 'macos-12' || 'ubuntu-22.04' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build libgdtemu
        uses: ./.github/actions/build
        with:
          platform: ${{ matrix.platform }}
          arch: ${{ matrix.arch }}
          target: template_${{ matrix.target }}
          upload: true

#  test:
#    name: 'Run Tests'
#    needs: [ buildroot ]
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        platform: [ linux, osx, windows ]
#        bits: [ 64, 32 ]
#        godot_version: [ 'v3.4.5-stable', 'v3.5-stable' ]
#        include:
#          - platform: linux
#            os: ubuntu-latest
#          - platform: osx
#            os: macos-latest
#          - platform: windows
#            os: windows-latest
#        exclude:
#          - platform: osx
#            bits: 32
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#      - name: Setup Godot
#        uses: lihop/setup-godot@v2
#        with:
#          version: ${{ matrix.godot_version }}
#          bits: ${{ matrix.bits }}
#      - name: Cache plugins
#        id: cache-plugins
#        uses: actions/cache@v3
#        with:
#          path: |
#            addons/*
#            !addons/gdtemu
#          key: ${{ hashFiles('**/plug.gd') }}-${{ env.CACHE_VERSION }}
#      - name: Install plugins
#        if: steps.cache-plugins.outputs.cache-hit != 'true'
#        shell: bash
#        run: godot --no-window -s plug.gd install
#      - name: Install binaries
#        uses: ./.github/actions/install-binaries
#        with:
#          platform: ${{ matrix.platform }}
#          bits: ${{ matrix.bits }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Import resources
#        shell: bash
#        run: godot --editor addons/gut/.cli_add/__rebuilder_scene.tscn
#      - name: Run unit and integration tests
#        uses: nick-fields/retry@v2
#        with:
#          shell: bash
#          command: godot --no-window -s addons/gut/gut_cmdln.gd -gconfig=.gutconfig_ci.json
#          retry_on: error
#          timeout_minutes: 5
#          max_attempts: 6
 
  buildroot:
    name: Buildroot
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ pc, riscv32, riscv64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Calculate cache keys
        run: |
          echo "BUILDROOT_BOARD_HASH=${{ hashFiles(format('addons/gdtemu/board/{0}/*', matrix.target)) }}" >> $GITHUB_ENV
          echo "BUILDROOT_CONFIG_HASH=${{ hashFiles(format('examples/{0}/buildroot/.config', matrix.target)) }}" >> $GITHUB_ENV
          echo "BUILDROOT_ROOTFS_OVERLAY_HASH=${{ hashFiles(format('examples/{0}/buildroot/rootfs_overlay/**/*', matrix.target)) || '0' }}" >> $GITHUB_ENV
      - name: Setup ccache
        uses: actions/cache@v3
        with:
          path: ~/.buildroot-ccache
          key: buildroot-ccache-${{ matrix.target }}-${{ env.BUILDROOT_BOARD_HASH }}-${{ env.BUILDROOT_CONFIG_HASH }}
          restore-keys: |
            buildroot-ccache-${{ matrix.target }}-${{ env.BUILDROOT_BOARD_HASH }}-
            buildroot-ccache-${{ matrix.target }}-
            buildroot-ccache-
      - name: Install dependencies (pc)
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ matrix.target == 'pc' }}
        with:
          packages: libelf-dev
      - name: Make
        run: make
        working-directory: examples/${{ matrix.target }}/buildroot

            #      - name: Generate buildroot cache key
            #        run: >-
            #          echo "BUILDROOT_CACHE_KEY=buildroot-${{ matrix.target }}-${{ format('{0}-{1}-{2}',
            #            hashFiles(format('addons/gdtemu/board/{0}/*', matrix.target)),
            #            hashFiles(format('examples/{0}/buildroot/.config', matrix.target)),
            #            hashFiles(format('examples/{0}/buildroot/rootfs_overlay', matrix.target)) || '0')
            #          }}" >> $GITHUB_ENV
            #          #      - name: Cache buildroot
            #          #        id: cache-buildroot
            #          #        uses: actions/cache@v3
            #          #        with:
            #          #          path: |
            #          #            examples/**/images
            #          #            examples/**/buildroot/build
            #          #            examples/**/buildroot/host
            #          #            examples/**/buildroot/staging
            #          #          key: ${{ env.BUILDROOT_CACHE_KEY }}
            #      - name: Cache buildroot ccache
            #        #        if: steps.cache-buildroot.outputs.cache-hit != 'true'
            #        uses: actions/cache@v3
            #        with:
            #          path: ~/.buildroot-ccache
            #          key: ccache-${{ env.BUILDROOT_CACHE_KEY }}
            #          restore-keys: |
            #            ccache-buildroot-${{ matrix.target }}-
            #            ccache-buildroot-
            #      - uses: awalsh128/cache-apt-pkgs-action@latest
            #        #if: steps.cache-buildroot.outputs.cache-hit != 'true'
            #        with:
            #          packages: libelf-dev
            #      - run: make
            #        #if: steps.cache-buildroot.outputs.cache-hit != 'true'
            #        working-directory: examples/${{ matrix.target }}/buildroot
            #      - name: Upload example images
            #        uses: actions/upload-artifact@v3
            #        with:
            #          name: example-images-${{ matrix.target }}
            #          path: |
            #            examples/${{ matrix.target }}/images/*Image
            #            examples/${{ matrix.target }}/images/rootfs*

#  export-demo:
#    name: 'Export Demo'
#    needs: [ buildroot ]
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        platform: [ linux, javascript, osx, windows ]
#        bits: [ 64, 32 ]
#        exclude:
#          - platform: javascript
#            bits: 64
#          - platform: osx
#            bits: 32
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#      - name: Setup Godot
#        uses: lihop/setup-godot@v2
#        with:
#          version: ${{ env.TARGET_GODOT_VERSION }} 
#          export-templates: true
#      - name: Cache plugins
#        id: cache-plugins
#        uses: actions/cache@v3
#        with:
#          path: |
#            addons/*
#            !addons/gdtemu
#          key: ${{ hashFiles('**/plug.gd') }}-${{ env.CACHE_VERSION }}
#      - name: Install plugins
#        if: steps.cache-plugins.outputs.cache-hit != 'true'
#        shell: bash
#        run: godot --no-window -s plug.gd install
#      - name: Install binaries
#        uses: ./.github/actions/install-binaries
#        with:
#          platform: ${{ matrix.platform }}
#          bits: ${{ matrix.bits }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Export demo
#        uses: nick-fields/retry@v2
#        with:
#          shell: bash
#          command: godot --no-window --export ${{ matrix.platform }}.${{ matrix.bits}}
#          retry_on: error
#          timeout_minutes: 5
#          max_attempts: 6
#      - name: Upload demo
#        uses: actions/upload-artifact@v2
#        with:
#          name: gdtemu-demo.${{ matrix.platform }}.${{ matrix.bits }}
#          path: |
#            export/${{ matrix.platform }}.${{ matrix.bits }}
#            !export/**/.gitkeep
#
#  smoke-test:
#    name: 'Smoke Test'
#    needs: [ export-demo ]
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        platform: [ linux, windows, osx ]
#        bits: [ 64, 32 ]
#        include:
#          - platform: linux
#            os: ubuntu-latest
#          - platform: windows
#            os: windows-latest
#          - platform: osx
#            os: macos-latest
#          - bits: 64
#            extension: x86_64
#          - bits: 32
#            extension: x86
#          - platform: windows
#            extension: exe
#        exclude:
#          - platform: osx
#            bits: 32
#    steps:
#      - name: Setup Godot
#        uses: lihop/setup-godot@v2
#        with:
#          bits: ${{ matrix.bits }}
#      - name: Download demo
#        uses: actions/download-artifact@v2
#        with:
#          name: gdtemu-demo.${{ matrix.platform }}.${{ matrix.bits }}
#          path: ./
#      - name: Run demo for 15 seconds
#        shell: bash
#        run: |
#          # Use dedicated tee file descriptor to redirect output to console *and* file.
#          exec 3> >(tee log.txt)
#          if [[ $RUNNER_OS == 'macOS' ]]; then
#            unzip gdtemu_demo.zip
#            demo=./gdtemu_demo.app/Contents/MacOS/gdtemu_demo
#          else
#            demo=./gdtemu_demo.${{ matrix.extension }}
#            chmod +x $demo
#          fi
#          $demo >&3 2>&1 & sleep 15 ; kill $!
#      - name: Check for errors in log file
#        shell: bash
#        run: '! grep ERROR log.txt'
#
  build-tinyemu-linux:
    name: 'Build TinyEMU (linux)'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libcurl4-openssl-dev libssl-dev zlib1g-dev libsdl2-dev
      - run: make
        working-directory: addons/gdtemu/native/thirdparty/TinyEMU

  build-tinyemu-js:
    name: 'Build TinyEMU (js)'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
      - run: docker run -dit --name emscripten -v $(pwd):/src trzeci/emscripten:sdk-incoming-64bit bash
        working-directory: addons/gdtemu/native/thirdparty/TinyEMU
      - run: docker exec emscripten make -f Makefile.js
        working-directory: addons/gdtemu/native/thirdparty/TinyEMU

  build-tinyemu-mac:
    name: 'Build TinyEMU (macos)'
    runs-on: macos-11
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
    steps:
      - uses: actions/checkout@v3
      - run: brew install openssl sdl2
        working-directory: addons/gdtemu/native/thirdparty/TinyEMU
      - run: make CFLAGS=-I$(brew --prefix)/opt/openssl/include LDFLAGS=-L$(brew --prefix)/opt/openssl/lib CONFIG_MACOS=y
        working-directory: addons/gdtemu/native/thirdparty/TinyEMU

  build-tinyemu-ios:
    name: 'Build TinyEMU (ios)'
    runs-on: macos-11
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
    steps:
      - uses: actions/checkout@v3
      - run: make CONFIG_IOS=y CONFIG_FS_NET= CONFIG_SDL=
        working-directory: addons/gdtemu/native/thirdparty/TinyEMU
      - run: make clean
        working-directory: addons/gdtemu/native/thirdparty/TinyEMU
      - run: make CONFIG_IOS_SIMULATOR=y CONFIG_FS_NET= CONFIG_SDL=
        working-directory: addons/gdtemu/native/thirdparty/TinyEMU
